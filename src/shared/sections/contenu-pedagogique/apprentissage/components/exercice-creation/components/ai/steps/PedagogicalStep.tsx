// src/shared/sections/contenu-pedagogique/apprentissage/components/exercice-creation/components/ai/steps/PedagogicalStep.tsx

'use client';

import React from 'react';
import { Box, Grid, Card, Chip, TextField, Typography, Autocomplete } from '@mui/material';

import type { AiFormData, BloomLevel } from '../../../types/ai-types';

interface PedagogicalStepProps {
  data: AiFormData;
  errors: Record<string, string>;
  onChange: (updates: Partial<AiFormData>) => void;
}

const SUGGESTED_OBJECTIVES = [
  'Identifier les diff√©rents temps de conjugaison',
  'Appliquer les r√®gles de grammaire',
  'Analyser un texte litt√©raire',
  'R√©soudre des √©quations du premier degr√©',
  'Comprendre les concepts fondamentaux',
  "D√©velopper l'esprit critique",
  'M√©moriser les formules essentielles',
  'Cr√©er des productions originales',
];

const SUGGESTED_COMPETENCIES = [
  'Expression √©crite',
  'Compr√©hension de texte',
  'Raisonnement logique',
  'Analyse critique',
  'R√©solution de probl√®mes',
  'Cr√©ativit√©',
  'M√©morisation',
  'Synth√®se',
];

const BLOOM_LEVELS = [
  {
    value: 'remember',
    label: 'Se souvenir',
    description: 'M√©moriser et rappeler',
    color: '#E3F2FD',
  },
  {
    value: 'understand',
    label: 'Comprendre',
    description: 'Expliquer des id√©es',
    color: '#E8F5E8',
  },
  {
    value: 'apply',
    label: 'Appliquer',
    description: 'Utiliser dans de nouvelles situations',
    color: '#FFF3E0',
  },
  { value: 'analyze', label: 'Analyser', description: 'D√©composer et examiner', color: '#FCE4EC' },
  { value: 'evaluate', label: '√âvaluer', description: 'Porter des jugements', color: '#F3E5F5' },
  {
    value: 'create',
    label: 'Cr√©er',
    description: 'Produire quelque chose de nouveau',
    color: '#FFEBEE',
  },
] as const;

const PedagogicalStep: React.FC<PedagogicalStepProps> = ({ data, errors, onChange }) => {
  const handleBloomLevelToggle = (level: BloomLevel) => {
    const newLevels = data.bloomTaxonomyLevels.includes(level)
      ? data.bloomTaxonomyLevels.filter((l) => l !== level)
      : [...data.bloomTaxonomyLevels, level];
    onChange({ bloomTaxonomyLevels: newLevels });
  };

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h6" gutterBottom>
        Objectifs p√©dagogiques
      </Typography>
      <Typography variant="body2" color="text.secondary" sx={{ mb: 4 }}>
        D√©finissez les comp√©tences et objectifs d'apprentissage vis√©s
      </Typography>

      <Grid container spacing={3}>
        {/* Learning Objectives */}
        <Grid item xs={12}>
          <Card sx={{ p: 3 }}>
            <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
              Objectifs d'apprentissage
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
              Que doivent apprendre ou ma√Ætriser les √©tudiants avec cet exercice ?
            </Typography>

            <Autocomplete
              multiple
              freeSolo
              options={SUGGESTED_OBJECTIVES}
              value={data.learningObjectives}
              onChange={(_, newValue) => onChange({ learningObjectives: newValue })}
              renderInput={(params) => (
                <TextField
                  {...params}
                  placeholder="Ajoutez des objectifs d'apprentissage..."
                  helperText="D√©crivez ce que les √©tudiants doivent acqu√©rir"
                  error={!!errors.learningObjectives}
                />
              )}
              renderTags={(value, getTagProps) =>
                value.map((option, index) => (
                  <Chip
                    {...getTagProps({ index })}
                    key={option}
                    label={option}
                    size="small"
                    color="success"
                  />
                ))
              }
            />

            {errors.learningObjectives && (
              <Typography variant="body2" color="error" sx={{ mt: 1 }}>
                {errors.learningObjectives}
              </Typography>
            )}
          </Card>
        </Grid>

        {/* Competencies */}
        <Grid item xs={12}>
          <Card sx={{ p: 3 }}>
            <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
              Comp√©tences √† d√©velopper
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
              Quelles comp√©tences transversales cet exercice permet-il de travailler ?
            </Typography>

            <Autocomplete
              multiple
              freeSolo
              options={SUGGESTED_COMPETENCIES}
              value={data.competencies}
              onChange={(_, newValue) => onChange({ competencies: newValue })}
              renderInput={(params) => (
                <TextField
                  {...params}
                  placeholder="Ajoutez des comp√©tences..."
                  helperText="Comp√©tences g√©n√©rales ou transversales"
                />
              )}
              renderTags={(value, getTagProps) =>
                value.map((option, index) => (
                  <Chip
                    {...getTagProps({ index })}
                    key={option}
                    label={option}
                    size="small"
                    color="info"
                  />
                ))
              }
            />
          </Card>
        </Grid>

        {/* Bloom Taxonomy */}
        <Grid item xs={12}>
          <Card sx={{ p: 3 }}>
            <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
              Niveaux cognitifs (Taxonomie de Bloom)
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
              S√©lectionnez les niveaux de complexit√© cognitive √† cibler
            </Typography>

            <Grid container spacing={2}>
              {BLOOM_LEVELS.map((level) => (
                <Grid item xs={12} sm={6} md={4} key={level.value}>
                  <Card
                    sx={{
                      p: 2,
                      border: data.bloomTaxonomyLevels.includes(level.value) ? 2 : 1,
                      borderColor: data.bloomTaxonomyLevels.includes(level.value)
                        ? 'primary.main'
                        : 'divider',
                      cursor: 'pointer',
                      bgcolor: data.bloomTaxonomyLevels.includes(level.value)
                        ? level.color
                        : 'background.paper',
                      transition: 'all 0.2s',
                      '&:hover': {
                        borderColor: 'primary.main',
                        bgcolor: level.color,
                      },
                    }}
                    onClick={() => handleBloomLevelToggle(level.value)}
                  >
                    <Typography variant="subtitle2" fontWeight="bold" gutterBottom>
                      {level.label}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      {level.description}
                    </Typography>
                  </Card>
                </Grid>
              ))}
            </Grid>

            {data.bloomTaxonomyLevels.length === 0 && (
              <Typography variant="body2" color="error" sx={{ mt: 2 }}>
                Veuillez s√©lectionner au moins un niveau cognitif
              </Typography>
            )}
          </Card>
        </Grid>

        {/* Summary */}
        <Grid item xs={12}>
          <Card sx={{ p: 3, bgcolor: 'success.lighter' }}>
            <Typography variant="subtitle1" fontWeight="bold" color="success.main" gutterBottom>
              üéØ R√©sum√© p√©dagogique
            </Typography>

            <Grid container spacing={2}>
              <Grid item xs={12} md={4}>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Objectifs d'apprentissage
                </Typography>
                {data.learningObjectives.length > 0 ? (
                  <Box>
                    {data.learningObjectives.slice(0, 2).map((objective, index) => (
                      <Typography key={index} variant="body2" sx={{ fontSize: '0.875rem' }}>
                        ‚Ä¢ {objective}
                      </Typography>
                    ))}
                    {data.learningObjectives.length > 2 && (
                      <Typography variant="caption" color="text.secondary">
                        +{data.learningObjectives.length - 2} autres...
                      </Typography>
                    )}
                  </Box>
                ) : (
                  <Typography variant="body2" color="text.secondary" sx={{ fontStyle: 'italic' }}>
                    Aucun objectif d√©fini
                  </Typography>
                )}
              </Grid>

              <Grid item xs={12} md={4}>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Comp√©tences vis√©es
                </Typography>
                {data.competencies.length > 0 ? (
                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                    {data.competencies.slice(0, 3).map((competency) => (
                      <Chip
                        key={competency}
                        label={competency}
                        size="small"
                        sx={{ fontSize: '0.7rem' }}
                      />
                    ))}
                    {data.competencies.length > 3 && (
                      <Chip
                        label={`+${data.competencies.length - 3}`}
                        size="small"
                        variant="outlined"
                        sx={{ fontSize: '0.7rem' }}
                      />
                    )}
                  </Box>
                ) : (
                  <Typography variant="body2" color="text.secondary" sx={{ fontStyle: 'italic' }}>
                    Aucune comp√©tence d√©finie
                  </Typography>
                )}
              </Grid>

              <Grid item xs={12} md={4}>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Niveaux cognitifs
                </Typography>
                {data.bloomTaxonomyLevels.length > 0 ? (
                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                    {data.bloomTaxonomyLevels.map((level) => {
                      const bloomLevel = BLOOM_LEVELS.find((bl) => bl.value === level);
                      return (
                        <Chip
                          key={level}
                          label={bloomLevel?.label || level}
                          size="small"
                          sx={{ fontSize: '0.7rem' }}
                        />
                      );
                    })}
                  </Box>
                ) : (
                  <Typography variant="body2" color="text.secondary" sx={{ fontStyle: 'italic' }}>
                    Aucun niveau s√©lectionn√©
                  </Typography>
                )}
              </Grid>
            </Grid>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
};

export default PedagogicalStep;
